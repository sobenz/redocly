{
  "swagger": "2.0",
  "info": {
    "version": "1.0.154.9",
    "title": "Plexure Authorization Service",
    "description": "Provides means for consumers api and SDK to get authorization.",
    "contact": {
      "name": "Plexure Support",
      "url": "https://support.plexure.com",
      "email": "support@plexure.com"
    }
  },
  "paths": {
    "/Authentication/ConsumerAuthentication": {
      "get": {
        "tags": [
          "Consumer Authentication"
        ],
        "summary": "Returns the authentication record of the consumer.",
        "operationId": "GetConsumerAuthenticationAsync",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "consumerId",
            "in": "query",
            "description": "Unique Id of the Consumer",
            "required": false,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConsumerAuthentication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authentication/ValidateOtp": {
      "post": {
        "tags": [
          "Consumer Authentication"
        ],
		"description": "Validates the OTP token for a consumer. For more indepth documentation read the guide on [OTP Validation](/howto/otp-validation)",
        "summary": "Validates Otp of Consumer.",
        "operationId": "ValidateOtpAsync",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "otp",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/ServiceTokens": {
      "get": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates a Service Tokens",
        "operationId": "GetServiceTokensAsync",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Id of tenant",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/ConsumerTokens": {
      "post": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Consumer",
        "operationId": "CreateConsumerTokensAsync",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "consumerTokenParameter",
            "in": "body",
            "description": "ConsumerTokenParameter representing the required parameters",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumerTokenParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/ConsumerMfaTokens": {
      "post": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Consumer MFA",
        "operationId": "CreateConsumerMfaTokensAsync",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "consumerMfaTokenParameter",
            "in": "body",
            "description": "ConsumerMfaTokenParameter representing the required parameters (DeviceId, TenantId, ConsumerId)",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumerMfaTokenParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/DeviceTokens": {
      "post": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Device",
        "operationId": "CreateDeviceTokensAsync",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "deviceTokenParameter",
            "in": "body",
            "description": "DeviceTokenParameter representing the required parameters",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeviceTokenParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/MerchantTokens": {
      "post": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Merchant",
        "operationId": "CreateMerchantTokensAsync",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "merchantTokenParameter",
            "in": "body",
            "description": "MerchantTokenParameter representing the required parameters",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MerchantTokenParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/ActivityTokens": {
      "get": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Activity",
        "operationId": "CreateActivityTokensAsync",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/ActivityTokens/external": {
      "post": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Activity internally",
        "operationId": "CreateExternalActivityTokensAsync",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "consumerActivityTokenParameter",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumerActivityTokenParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/ActivityTokens/internal": {
      "post": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates both the Refresh Token and Access Token of type Activity internally",
        "operationId": "CreateInternalActivityTokensAsync",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "consumerActivityTokenParameter",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumerActivityTokenParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Authorization/AccessToken": {
      "get": {
        "tags": [
          "Consumer Authorization"
        ],
        "summary": "Creates an Access Token from a Refresh Token.",
        "operationId": "GetAccessTokenAsync",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "refreshToken",
            "in": "header",
            "description": "This is the JWT Refresh Token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtTokenPair"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Tools/ValidateAccessTokens": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Validate a token",
        "operationId": "ValidateAccessTokens",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueTuple[String,String]"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Tools/GetTenantConfig": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "get tenant configuration",
        "operationId": "GetConfig",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthorizationTenantConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    },
    "/Tools/SetTenantConfig": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "set tenant configuration",
        "operationId": "SetConfig",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "authorizationTenantConfiguration",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AuthorizationTenantConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthorizationTenantConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConsumerAuthentication": {
      "type": "object",
      "properties": {
        "partitionKey": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "deactivatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "mfaDetails": {
          "$ref": "#/definitions/ConsumerAuthenticationMfaDetails"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "ConsumerAuthenticationMfaDetails": {
      "type": "object",
      "properties": {
        "channel": {
          "enum": [
            "email"
          ],
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "unusedOTPCount": {
          "format": "int32",
          "type": "integer"
        },
        "invalidOtpCount": {
          "format": "int32",
          "type": "integer"
        },
        "lastInvalidDatetime": {
          "format": "date-time",
          "type": "string"
        },
        "lastSuccessfulDateTime": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ProblemDetails": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "JwtTokenPair": {
      "type": "object",
      "properties": {
        "jwtAccessToken": {
          "type": "string"
        },
        "jwtRefreshToken": {
          "type": "string"
        },
        "token_type": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ConsumerTokenParameter": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "impersonatedBy": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "ConsumerMfaTokenParameter": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "DeviceTokenParameter": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "marketId": {
          "format": "int32",
          "type": "integer"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "MerchantTokenParameter": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        }
      }
    },
    "ConsumerActivityTokenParameter": {
      "type": "object",
      "properties": {
        "gender": {
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "impersonatedBy": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "ValueTuple[String,String]": {
      "type": "object",
      "properties": {
        "item1": {
          "type": "string"
        },
        "item2": {
          "type": "string"
        }
      }
    },
    "AuthorizationTenantConfiguration": {
      "type": "object",
      "properties": {
        "consumerTokenExpiration": {
          "$ref": "#/definitions/TokenExpiration"
        },
        "merchantTokenExpiration": {
          "$ref": "#/definitions/TokenExpiration"
        },
        "activityTokenExpiration": {
          "$ref": "#/definitions/TokenExpiration"
        },
        "serviceTokenExpiration": {
          "$ref": "#/definitions/TokenExpiration"
        },
        "deviceTokenExpiration": {
          "$ref": "#/definitions/TokenExpiration"
        }
      }
    },
    "TokenExpiration": {
      "type": "object",
      "properties": {
        "accessTokenExpiration": {
          "format": "int64",
          "type": "integer"
        },
        "refreshTokenExpiration": {
          "format": "int64",
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "name": "Authorization",
      "in": "header",
      "type": "apiKey",
      "description": "Please insert JWT with Bearer into field"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}